# -*- coding: utf-8 -*-
"""Weather_Prediction_Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19m39iVL3nDeFgPknZgGLEBh0ZTQTebPW

**Import necessary libraries**
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_selection import SelectKBest, mutual_info_classif, f_classif, RFE, SelectFromModel
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Conv1D, MaxPooling1D, Flatten, LSTM
import warnings

"""**Load the datasets**"""

from google.colab import drive
drive.mount('/content/drive')

weather_data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/archive_3/weather_prediction_dataset.csv')
bbq_labels = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/archive_3/weather_prediction_bbq_labels.csv')

"""**show datasets**"""

weather_data.head()

bbq_labels.head()

"""**Merge datasets on the 'DATE' column**"""

merged_data = pd.merge(weather_data, bbq_labels, on='DATE')
merged_data .head()

"""**Check for missing values in merged_data**"""

missing_counts = merged_data.isna().sum().sum()
missing_counts

print(f"Weather Data shape: {weather_data.shape}")

"""**define X and y**"""

import matplotlib.pyplot as plt

oslo_columns = merged_data.filter(like='OSLO')

oslo_means = oslo_columns.mean()

plt.figure(figsize=(14, 8))
oslo_means.plot(kind='bar', color='skyblue')

plt.ylabel('Average Value')
plt.title('Average Values of Oslo-Related Weather Data')

plt.xticks(rotation=45, ha='right')

plt.tight_layout()
plt.show()

"""**Spliting**"""

oslo_columns = merged_data.filter(like='OSLO')

X = pd.concat([merged_data[['DATE', 'MONTH']], merged_data[oslo_columns.columns]], axis=1)

y = merged_data['OSLO_temp_min']

X.drop('OSLO_temp_min', axis=1, inplace=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import StandardScaler
import numpy as np

scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)

X_test_scaled = scaler.transform(X_test)


model = Sequential()

# Add input layer and the first hidden layer
model.add(Dense(units=64, activation='relu', input_shape=(X_train.shape[1],)))

# Add additional hidden layers
model.add(Dense(units=64, activation='relu'))

#output layer
model.add(Dense(units=1))

# Compile
model.compile(optimizer='adam', loss='mean_squared_error')

history = model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, validation_split=0.2)

y_pred = model.predict(X_test_scaled)

print(y_pred)
test_loss = model.evaluate(X_test_scaled, y_test)

print(f'Test Loss: {test_loss}')

from sklearn.metrics import mean_absolute_error, mean_squared_error

y_pred = model.predict(X_test_scaled)

mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

#LSTM

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import mean_absolute_error, mean_squared_error

oslo_columns = merged_data.filter(like='OSLO')

X = pd.concat([merged_data[['DATE', 'MONTH']], oslo_columns], axis=1)

X.drop('OSLO_BBQ_weather', axis=1, inplace=True)

y = merged_data['OSLO_temp_min']

X.drop('OSLO_temp_min', axis=1, inplace=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)

X_test_scaled = scaler.transform(X_test)

# Reshape data to 3D for LSTM
X_train_scaled = np.reshape(X_train_scaled, (X_train_scaled.shape[0], 1, X_train_scaled.shape[1]))
X_test_scaled = np.reshape(X_test_scaled, (X_test_scaled.shape[0], 1, X_test_scaled.shape[1]))

model = Sequential()

# LSTM layer
model.add(LSTM(units=50, return_sequences=True, input_shape=(X_train_scaled.shape[1], X_train_scaled.shape[2])))
model.add(LSTM(units=50))

# output layer
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

history = model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, validation_split=0.2)
test_loss = model.evaluate(X_test_scaled, y_test)

print(f'Test Loss: {test_loss}')

y_pred = model.predict(X_test_scaled)

# (MAE)
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

#CNN

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense
from sklearn.metrics import mean_absolute_error, mean_squared_error


oslo_columns = merged_data.filter(like='OSLO')

# Create X with 'DATE', 'MONTH', and Oslo-related columns
X = pd.concat([merged_data[['DATE', 'MONTH']], oslo_columns], axis=1)

# Drop the target variable OSLO_BBQ_weather from X
X.drop('OSLO_BBQ_weather', axis=1, inplace=True)

y = merged_data['OSLO_temp_min']

X.drop('OSLO_temp_min', axis=1, inplace=True)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()

X_train_scaled = scaler.fit_transform(X_train)

X_test_scaled = scaler.transform(X_test)

# Reshape data to 3D for CNN
X_train_scaled = np.reshape(X_train_scaled, (X_train_scaled.shape[0], X_train_scaled.shape[1], 1))
X_test_scaled = np.reshape(X_test_scaled, (X_test_scaled.shape[0], X_test_scaled.shape[1], 1))


model = Sequential()

# Add Conv1D layer
model.add(Conv1D(filters=64, kernel_size=2, activation='relu', input_shape=(X_train_scaled.shape[1], 1)))

# Add MaxPooling1D
model.add(MaxPooling1D(pool_size=2))

# another Conv1D layer
model.add(Conv1D(filters=64, kernel_size=2, activation='relu'))
model.add(MaxPooling1D(pool_size=2))
model.add(Flatten())

model.add(Dense(units=50, activation='relu'))

# output layer
model.add(Dense(units=1))

model.compile(optimizer='adam', loss='mean_squared_error')

history = model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, validation_split=0.2)


# Predict
y_pred = model.predict(X_test_scaled)

test_loss = model.evaluate(X_test_scaled, y_test)

print(f'Test Loss: {test_loss}')

# (MAE)
mae = mean_absolute_error(y_test, y_pred)
print(f'Mean Absolute Error: {mae}')

# (MSE)
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

import matplotlib.pyplot as plt

nn_mae = 0.98
nn_mse = 1.49

lstm_mae = 0.96
lstm_mse = 1.48

cnn_mae = 1.20
cnn_mse = 2.43

models = ['NN', 'LSTM', 'CNN']
mae_values = [nn_mae, lstm_mae, cnn_mae]
mse_values = [nn_mse, lstm_mse, cnn_mse]

# Plot the MAE and MSE in histograms
fig, axes = plt.subplots(1, 2, figsize=(14, 6))

# Plot MAE
axes[0].bar(models, mae_values, color=['blue', 'orange', 'green'])
axes[0].set_title('Mean Absolute Error (MAE)')
axes[0].set_ylabel('MAE')

# Plot MSE
axes[1].bar(models, mse_values, color=['blue', 'orange', 'green'])
axes[1].set_title('Mean Squared Error (MSE)')
axes[1].set_ylabel('MSE')

plt.suptitle('Performance Comparison of NN, LSTM, and CNN')
plt.show()